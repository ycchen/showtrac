== README

This README would normally document whatever steps are necessary to get the
application up and running.

Things you may want to cover:

* Ruby version

* System dependencies

* Configuration

* Database creation

* Database initialization

* How to run the test suite

* Services (job queues, cache servers, search engines, etc.)

* Deployment instructions

* ...


Please feel free to use a different markup language if you do not plan to run
<tt>rake doc:app</tt>.
# generate dog table
$ rails g scaffold dog name:string call_name:string birthday:date sex:string registration_no:string 

# generate show table
$ rails g scaffold show name:string kennel_club:string start_date:date end_date:date location:string

# migrate script
$ rake db:migrate

# generate show_entry table
$ rails g scaffold show_entry dog:references show:references entry_fee:decimal handling_fee:decimal points:integer title:string show_date:date

$ rake db:migrate

# add the relationship to dog, show and show_entry models

--- dog model ---

has_many :show_entries

--- show model ---

has_many :show_entries

--- show_entry model ---

belongs_to: dog
belongs_to: show

# update Gemfile

group :development, :test do
	# Use sqlite3 as the database for Active Record
	gem 'sqlite3'
	# Use Capistrano for deployment
	gem 'capistrano'			# interation testing tools for rack based web application
	gem 'factory_girl_rails' 	# fixtures replacement
	gem 'faker'					# generate fake data
end

# added devise gem to Gemfile
gem 'devise'

== User Model

1. install devise gem

$ rails g devise:install

2. create user model
$ rails g devise User
$ rake db:migrate

== Remeber to change Gemfile.lock to rename sqlite3 (1.3.7-x86-mingw32) to sqlite3 (1.3.7-x64-mingw32) every time runs bundle install

--- included gem 'bootstrap-sass-rails'  	# bootstrap framework
gem 'bootstrap-sass-rails'  	# bootstrap framework

--- updated views\layouts\application.html.erb with layout

--- added shared folder in views\shared

--- create _navigation.html.rb in views\shared folder

--- added <%= render :partial => 'shared/navigation' %> to application.html.erb

3. generate devise views files
$ rails g devise:views devise

4. update sign in and sign up layout view files
-- views\devise\registrations\edit.html.erb
-- views\devise\registrations\new.html.erb
-- views\devise\sessions\new.html.erb

== Generate migration script to update show_entry table
$ rails g migration add_show_date_and_expense_to_show_entry show_date:date expense:decimal

-- modified migration script
add_column :show_entries, :expense, :decimal, :precision => 8, :scale => 2, default => 0.0

-- added ruby array in dog.rb model
SEX_TYPE = %w[Female Male]

-- refere to SEX_TYPE array
Dog::SEX_TYPE.first

Dog::SEX_TYPE.last

-- create a date using Date class
http://ruby-doc.org/stdlib-2.0/libdoc/date/rdoc/Date.html

Date.new(2013,2,19)  # Date: 2013-02-19
Date.parse('2013-02-19') # Date: 2013-02-19

== Generate migration script to add class to show_entry table
$ rails g migration add_reg_class_and_judge_to_show_entry reg_class:string judge:string

$ rake db:migrate

-- make sure update controllers show_entry_params and add new fields 

-- update dog, show controllers of dog_params and show_params functions

== Generate charge table to description all charges
$ rails g scaffold charge name:string description:text

== Generate dog expense table to handle Vet's bill, boarding fee, and other related charge.

$ rails g scaffold dog_expense dog:references charge:references charge_date:date amount:decimal note:text

== Generate migration script to add show_entry_id to dog_expense table
$ rails g migration add_show_entry_id_to_dog_expense show_entry:references

-- Adding sum to view in particular column
<%= @dog.dog_expenses.map(&:amount).sum %>
<%= @dog.show_entries.map(&:points).sum %>

== Generate customer model
$ rails g scaffold customer name:string first_name:string last_name:string email:string phone:string mobile:string address:string city:string zipcode:string

== Generate payment_type model
$ rails g scaffold payment_type name:string description:text

== Generate sale model
$ rails g scaffold sale dog:references customer:references sale_date:date sale_price:decimal note:text

== Generate payment_status model
$ rails g scaffold payment_status name:string note:text


== Generate payment model
$ rails g scaffold payment sale:references payment_type:references payment_status:references payment_date:date amount:decimal note:text

== Generate photo model
$ rails g scaffold photo dog:references name:string data:binary filename:string mime_type:string
# cannot make it work so it will remove it later
$ rails destroy model photo  # this removed migrate script, models and test files
$ rails destroy controller photos # this removed controller, helpers and assests photos related files

== Install CarrierWave gem for upload file
-- Add gem 'carrierwave' to Gemfile
https://github.com/carrierwaveuploader/carrierwave/wiki

https://github.com/jnicklas/carrierwave-example-app/blob/master/app/views/users/_form.html.erb

1. generate uploader Avatar
$ rails g uploader Avatar  # this will give you a file in app/uploaders/avatar_uploader.rb

2. generate user model
$ rails g scaffold user name:string email:string avatar:string

3. update model/user.rb to add following code
	mount_uploader :avatar, AvatarUploader # this is to point :avatar column to use AvatarUploader class

4. modified views/user/_form.html.erb to add 
<% form_for @user, :html => { :multipart => true } do |f| %>
<p><%= f.label :name %><br /><%= f.text_field :name %></p>
<p><%= f.label :email %><br /><%= f.text_field :email %></p>
<p>
  <%= f.label :avatar, "Upload local file:" %><br />
  <%= f.file_field :avatar %>
</p>
<p><%= f.submit "Submit" %></p>
<% end %>

== Multiple files upolad with carrierwave and nested_form
1. add nested_form to Gemfile
gem 'nested_form'

-- install nested_form
$ rails g nested_form:install

-- updated assets\javascripts\application.js to add nested_form js
//= require jquery_nested_form

-- generate picture model
$ rails g model picture attachable:reference file:string

-- modified db\migrate\xxxx_create_pictures.rb
modified line below to add :polymorphic => true
t.references :attachable, index: true, :polymorphic => true

$ rake db:migrate

-- generate uploader from carrierwave gem
$ rails generate uploader file

-- update relationship between dog and picture models

-- models\picture.rb
belongs_to :dog, polymorphic: true
mount_uploader :file, FileUploader

-- models\dog.rb
has_many :pictures, :as => :attachable, :dependent => :destroy
accepts_nested_attributes_for :pictures, :allow_destroy => true

-- update controllers\dog.rb dog_params method
added :pictures_attributes => [:id, :file, '_destroy'] to the permit()